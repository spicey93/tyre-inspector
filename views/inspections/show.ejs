<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Inspection <%= inspection.code %></title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/css/bootstrap.min.css" rel="stylesheet"/>

  <style>
    :root{
      --muted:#6c757d;
      --ok:#198754;         /* success */
      --adv:#ffc107;        /* warning */
      --fail:#dc3545;       /* danger */
      --pill:#f8f9fa;
      --active-ring: rgba(13,110,253,.25);
    }
    body{ background:#fff; }
    .muted{ color:var(--muted); }
    .small-label{ font-size:.78rem; text-transform:uppercase; letter-spacing:.03em; color:var(--muted); }
    .code-badge{
      font-size:1.25rem;
      font-weight:700;
      letter-spacing:.06em;
      font-family: ui-monospace, Menlo, Consolas, monospace;
      padding: .35rem .6rem;
    }
    .clamp-2{ display:-webkit-box; -webkit-line-clamp:2; -webkit-box-orient:vertical; overflow:hidden; }
    .clamp-3{ display:-webkit-box; -webkit-line-clamp:3; -webkit-box-orient:vertical; overflow:hidden; }

    /* Screen layout: car left, detail right */
    .layout{
      display:grid; gap:1rem;
      grid-template-columns: 1fr;            /* mobile: stack */
      align-items:start;
    }
    @media (min-width: 992px){
      .layout{ grid-template-columns: .8fr 1.2fr; }
    }

    /* Car diagram */
    .car-wrap{
      position:relative;
      max-width:280px;
      margin-inline:auto;
    }
    @media (min-width: 576px){ .car-wrap{ max-width:320px; } }
    @media (min-width: 992px){ .car-wrap{ max-width:360px; } }
    .car-svg{ width:100%; height:auto; display:block; }

    .wheel{
      position:absolute;
      width:22%;
      aspect-ratio:1/1;
      border-radius:50%;
      transform: translate(-50%,-50%);
      border:2px solid #adb5bd;
      background:#fff;
      display:flex; align-items:center; justify-content:center;
      font-weight:700; font-size:.8rem; color:#495057;
      box-shadow:none;
      transition: box-shadow .15s, transform .05s;
      cursor:pointer; user-select:none;
    }
    .wheel:hover{ box-shadow:0 0 0 .45rem var(--active-ring) inset; }
    .wheel:active{ transform: translate(-50%,-50%) scale(0.98); }
    .wheel.ok    { border-color:var(--ok);   background:#e6f4ea; }
    .wheel.adv   { border-color:var(--adv);  background:#fff3cd; }
    .wheel.fail  { border-color:var(--fail); background:#f8d7da; }
    .wheel.active{ box-shadow:0 0 0 .55rem var(--active-ring) inset; transform: translate(-50%,-50%) scale(0.985); }

    /* Detail panel (screen) */
    .detail-card .list-group-item{ padding:.5rem .7rem; }
    .tread-pill{ min-width:2.6rem; text-align:center; background:var(--pill); }

    .cond-dot{ display:inline-block; width:.55rem; height:.55rem; border-radius:50%; margin-right:.35rem; position:relative; top:-1px; }
    .cond-ok{ background:var(--ok); }
    .cond-adv{ background:var(--adv); }
    .cond-fail{ background:var(--fail); }

    .hidden{ display:none !important; }

    /* PRINT */
    @media print {
      * { -webkit-print-color-adjust: exact; print-color-adjust: exact; }
      .no-print { display:none !important; }
      @page { size: A4 portrait; margin: 10mm; }

      html, body { font-size: 11px; }
      .container { max-width:none !important; width:auto !important; padding:0 !important; }
      .h4, h1, h2, h3, h4, h5 { margin: 0 0 .35rem 0; }

      /* Compact 2×2 card grid */
      .print-grid{
        display:grid; gap:8px;
        grid-template-columns: 1fr 1fr;
        align-items:start;
      }
      .card, .list-group, .list-group-item { break-inside: avoid; page-break-inside: avoid; }
      .card-header{ padding:.35rem .5rem; }
      .detail-card .list-group-item{ padding:.35rem .5rem; }
      .small-label{ font-size:.7rem; }
      .clamp-3{ -webkit-line-clamp:2; }

      /* Small car under cards */
      .print-car{ margin-top: 6mm; display: flex; justify-content:center; }
      .print-car .car-wrap{ max-width:240px !important; }
    }
  </style>
</head>
<body class="container py-3">

  <div class="mb-3 no-print">
    <a href="/" class="btn btn-sm btn-outline-secondary">← Home</a>
  </div>

  <%
    function fmt(v){ return (v ?? "") === "" ? "—" : v; }
    function treadClass(v){
      if (v == null || v === "") return "badge text-bg-secondary";
      const n = Number(v);
      if (isNaN(n)) return "badge text-bg-secondary";
      if (n < 3) return "badge text-bg-danger";
      if (n < 4) return "badge text-bg-warning text-dark";
      return "badge text-bg-success";
    }
    function badgeFor(node){
      const c = (node && node.condition) ? String(node.condition).toLowerCase() : null;
      if (c === "fail") return '<span class="badge text-bg-danger"><span class="cond-dot cond-fail"></span>Fail</span>';
      if (c === "advisory") return '<span class="badge text-bg-warning text-dark"><span class="cond-dot cond-adv"></span>Advisory</span>';
      if (c === "ok") return '<span class="badge text-bg-success"><span class="cond-dot cond-ok"></span>OK</span>';
      // fallback using tread depths
      const t = node?.treadDepth || {};
      const vals = [t.inner, t.middle, t.outer].map(Number).filter(n => !isNaN(n));
      if (vals.length){
        if (vals.some(v => v < 3)) return '<span class="badge text-bg-danger"><span class="cond-dot cond-fail"></span>Fail</span>';
        if (vals.some(v => v < 4)) return '<span class="badge text-bg-warning text-dark"><span class="cond-dot cond-adv"></span>Advisory</span>';
        return '<span class="badge text-bg-success"><span class="cond-dot cond-ok"></span>OK</span>';
      }
      return '<span class="badge text-bg-secondary">—</span>';
    }
    function statusClass(node){
      const c = (node && node.condition) ? String(node.condition).toLowerCase() : null;
      if (c === "fail") return "fail";
      if (c === "advisory") return "adv";
      if (c === "ok") return "ok";
      const t = node?.treadDepth || {};
      const vals = [t.inner, t.middle, t.outer].map(Number).filter(n => !isNaN(n));
      if (vals.length){
        if (vals.some(v => v < 3)) return "fail";
        if (vals.some(v => v < 4)) return "adv";
        return "ok";
      }
      return ""; // neutral
    }

    const created = inspection.createdAt ? new Date(inspection.createdAt) : null;

    const tyres = {
      osf: inspection.offside?.front || {},
      nsf: inspection.nearside?.front || {},
      osr: inspection.offside?.rear  || {},
      nsr: inspection.nearside?.rear || {},
    };
  %>

  <!-- Header -->
  <header class="mb-2">
    <div class="d-flex justify-content-between align-items-center">
      <h1 class="h4 mb-0">Tyre Inspection Report</h1>
      <span class="badge text-bg-light code-badge"><%= inspection.code %></span>
    </div>
    <div class="muted mt-1 d-flex flex-wrap gap-3">
      <div><strong>VRM:</strong> <%= inspection.vrm %></div>
      <% if (typeof inspection.mileage === "number") { %>
        <div><strong>Mileage:</strong> <%= inspection.mileage %></div>
      <% } %>
      <% if (created) { %>
        <div><strong>Date:</strong> <%= created.toLocaleString() %></div>
      <% } %>
    </div>
  </header>

  <!-- SCREEN: car left, single detail panel right -->
  <section class="layout no-print">
    <!-- Left: Car -->
    <aside>
      <div class="card">
        <div class="card-header fw-bold">Tyre overview</div>
        <div class="card-body">
          <div class="car-wrap position-relative">
            <!-- Car silhouette -->
            <svg class="car-svg" viewBox="0 0 400 800" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
              <rect x="60" y="60" width="280" height="680" rx="40" fill="#f1f3f5" stroke="#ced4da"/>
              <rect x="80" y="80" width="240" height="120" rx="20" fill="#e9ecef" />
              <rect x="80" y="600" width="240" height="120" rx="20" fill="#e9ecef" />
              <rect x="90" y="240" width="220" height="280" rx="16" fill="#dee2e6" />
              <line x1="60" y1="400" x2="340" y2="400" stroke="#ced4da" stroke-dasharray="4 6"/>
            </svg>

            <!-- Wheels (absolute, % coords) -->
            <div class="wheel <%= statusClass(tyres.osf) %>" data-key="osf" style="left:86%; top:19%;">OSF</div>
            <div class="wheel <%= statusClass(tyres.nsf) %>" data-key="nsf" style="left:14%; top:19%;">NSF</div>
            <div class="wheel <%= statusClass(tyres.osr) %>" data-key="osr" style="left:86%; top:81%;">OSR</div>
            <div class="wheel <%= statusClass(tyres.nsr) %>" data-key="nsr" style="left:14%; top:81%;">NSR</div>
          </div>
          <div class="small text-muted mt-2">Click a wheel to view its details.</div>
        </div>
      </div>
    </aside>

    <!-- Right: Single detail panel (hidden until a wheel is clicked) -->
    <article id="detail" class="detail-card">
      <div class="card hidden" id="detail-card">
        <div class="card-header d-flex justify-content-between align-items-center">
          <span id="detail-title" class="fw-bold"></span>
          <span id="detail-badge"></span>
        </div>
        <ul class="list-group list-group-flush">
          <li class="list-group-item">
            <div class="small-label">Size</div>
            <div id="d-size">—</div>
          </li>
          <li class="list-group-item">
            <div class="row">
              <div class="col-6">
                <div class="small-label">Pressure (psi)</div>
                <div id="d-press">—</div>
              </div>
              <div class="col-6">
                <div class="small-label">DOT</div>
                <div id="d-dot">—</div>
              </div>
            </div>
          </li>
          <li class="list-group-item">
            <div class="row">
              <div class="col-6">
                <div class="small-label">Brand</div>
                <div id="d-brand">—</div>
              </div>
              <div class="col-6">
                <div class="small-label">Model</div>
                <div id="d-model" class="clamp-2">—</div>
              </div>
            </div>
          </li>
          <li class="list-group-item">
            <div class="small-label mb-1">Tread depth (mm)</div>
            <div class="d-flex gap-2 flex-wrap">
              <span id="d-tin"  class="tread-pill badge text-bg-secondary">In —</span>
              <span id="d-tmid" class="tread-pill badge text-bg-secondary">Mid —</span>
              <span id="d-tout" class="tread-pill badge text-bg-secondary">Out —</span>
            </div>
          </li>
          <li class="list-group-item" id="notes-row" style="display:none;">
            <div class="small-label mb-1">Notes</div>
            <div id="d-notes" class="clamp-3"></div>
          </li>
        </ul>
      </div>
    </article>
  </section>

  <!-- PRINT LAYOUT: 2x2 cards + small car underneath -->
  <section class="print-grid d-none d-print-grid">
    <% function tyreCardPrint(title, node){ %>
      <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
          <span class="fw-bold"><%= title %></span>
          <span><%- badgeFor(node) %></span>
        </div>
        <ul class="list-group list-group-flush">
          <li class="list-group-item">
            <div class="small-label">Size</div>
            <div><%= fmt(node?.size) %></div>
          </li>
          <li class="list-group-item">
            <div class="row">
              <div class="col-6">
                <div class="small-label">Pressure (psi)</div>
                <div><%= fmt(node?.pressure) %></div>
              </div>
              <div class="col-6">
                <div class="small-label">DOT</div>
                <div><%= fmt(node?.dot) %></div>
              </div>
            </div>
          </li>
          <li class="list-group-item">
            <div class="row">
              <div class="col-6">
                <div class="small-label">Brand</div>
                <div><%= fmt(node?.brand) %></div>
              </div>
              <div class="col-6">
                <div class="small-label">Model</div>
                <div class="clamp-2"><%= fmt(node?.model) %></div>
              </div>
            </div>
          </li>
          <li class="list-group-item">
            <div class="small-label mb-1">Tread depth (mm)</div>
            <div class="d-flex gap-2 flex-wrap">
              <span class="tread-pill <%= treadClass(node?.treadDepth?.inner) %>">In <%= fmt(node?.treadDepth?.inner) %></span>
              <span class="tread-pill <%= treadClass(node?.treadDepth?.middle) %>">Mid <%= fmt(node?.treadDepth?.middle) %></span>
              <span class="tread-pill <%= treadClass(node?.treadDepth?.outer) %>">Out <%= fmt(node?.treadDepth?.outer) %></span>
            </div>
          </li>
          <% if (node?.notes) { %>
            <li class="list-group-item">
              <div class="small-label mb-1">Notes</div>
              <div class="clamp-3"><%= node.notes %></div>
            </li>
          <% } %>
        </ul>
      </div>
    <% } %>

    <%- tyreCardPrint("Offside Front (OSF)", tyres.osf) %>
    <%- tyreCardPrint("Nearside Front (NSF)", tyres.nsf) %>
    <%- tyreCardPrint("Offside Rear (OSR)",  tyres.osr) %>
    <%- tyreCardPrint("Nearside Rear (NSR)", tyres.nsr) %>
  </section>

  <div class="print-car d-none d-print-block">
    <div class="car-wrap position-relative">
      <svg class="car-svg" viewBox="0 0 400 800" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
        <rect x="60" y="60" width="280" height="680" rx="40" fill="#f1f3f5" stroke="#ced4da"/>
        <rect x="80" y="80" width="240" height="120" rx="20" fill="#e9ecef" />
        <rect x="80" y="600" width="240" height="120" rx="20" fill="#e9ecef" />
        <rect x="90" y="240" width="220" height="280" rx="16" fill="#dee2e6" />
        <line x1="60" y1="400" x2="340" y2="400" stroke="#ced4da" stroke-dasharray="4 6"/>
      </svg>
      <div class="wheel <%= statusClass(tyres.osf) %>" style="left:86%; top:19%;">OSF</div>
      <div class="wheel <%= statusClass(tyres.nsf) %>" style="left:14%; top:19%;">NSF</div>
      <div class="wheel <%= statusClass(tyres.osr) %>" style="left:86%; top:81%;">OSR</div>
      <div class="wheel <%= statusClass(tyres.nsr) %>" style="left:14%; top:81%;">NSR</div>
    </div>
  </div>

  <!-- Actions -->
  <section class="mt-3 d-flex gap-2 no-print">
    <button type="button" class="btn btn-outline-secondary" id="copyLink">Copy link</button>
    <button type="button" class="btn btn-outline-secondary" onclick="window.print()">Print</button>
  </section>

  <!-- Screen data + interactions -->
  <script>
    const TYRES = {
      osf: <%- JSON.stringify(tyres.osf || {}) %>,
      nsf: <%- JSON.stringify(tyres.nsf || {}) %>,
      osr: <%- JSON.stringify(tyres.osr || {}) %>,
      nsr: <%- JSON.stringify(tyres.nsr || {}) %>,
    };
    const TITLES = {
      osf: "Offside Front (OSF)",
      nsf: "Nearside Front (NSF)",
      osr: "Offside Rear (OSR)",
      nsr: "Nearside Rear (NSR)"
    };

    function fmt(v){ return (v ?? "") === "" ? "—" : v; }
    function treadBadgeClass(n){
      const val = Number(n);
      if (isNaN(val)) return "badge text-bg-secondary";
      if (val < 3) return "badge text-bg-danger";
      if (val < 4) return "badge text-bg-warning text-dark";
      return "badge text-bg-success";
    }
    function badgeFor(node){
      const c = node?.condition ? String(node.condition).toLowerCase() : null;
      if (c === "fail") return '<span class="badge text-bg-danger"><span class="cond-dot cond-fail"></span>Fail</span>';
      if (c === "advisory") return '<span class="badge text-bg-warning text-dark"><span class="cond-dot cond-adv"></span>Advisory</span>';
      if (c === "ok") return '<span class="badge text-bg-success"><span class="cond-dot cond-ok"></span>OK</span>';
      const t = node?.treadDepth || {};
      const vals = [t.inner, t.middle, t.outer].map(Number).filter(n => !isNaN(n));
      if (vals.length){
        if (vals.some(v => v < 3)) return '<span class="badge text-bg-danger"><span class="cond-dot cond-fail"></span>Fail</span>';
        if (vals.some(v => v < 4)) return '<span class="badge text-bg-warning text-dark"><span class="cond-dot cond-adv"></span>Advisory</span>';
        return '<span class="badge text-bg-success"><span class="cond-dot cond-ok"></span>OK</span>';
      }
      return '<span class="badge text-bg-secondary">—</span>';
    }

    function renderDetail(key){
      const t = TYRES[key] || {};
      document.getElementById('detail-title').textContent = TITLES[key];
      document.getElementById('detail-badge').innerHTML = badgeFor(t);

      document.getElementById('d-size').textContent  = fmt(t.size);
      document.getElementById('d-press').textContent = fmt(t.pressure);
      document.getElementById('d-dot').textContent   = fmt(t.dot);
      document.getElementById('d-brand').textContent = fmt(t.brand);
      document.getElementById('d-model').textContent = fmt(t.model);

      const tin  = t?.treadDepth?.inner, tmid = t?.treadDepth?.middle, tout = t?.treadDepth?.outer;
      const elIn  = document.getElementById('d-tin');
      const elMid = document.getElementById('d-tmid');
      const elOut = document.getElementById('d-tout');
      elIn.className  = 'tread-pill ' + treadBadgeClass(tin);  elIn.textContent  = 'In '  + fmt(tin);
      elMid.className = 'tread-pill ' + treadBadgeClass(tmid); elMid.textContent = 'Mid ' + fmt(tmid);
      elOut.className = 'tread-pill ' + treadBadgeClass(tout); elOut.textContent = 'Out ' + fmt(tout);

      const notesRow = document.getElementById('notes-row');
      if (t?.notes){ notesRow.style.display = ''; document.getElementById('d-notes').textContent = t.notes; }
      else { notesRow.style.display = 'none'; document.getElementById('d-notes').textContent = ''; }

      // Show the detail card if hidden
      document.getElementById('detail-card').classList.remove('hidden');
    }

    // Wheel click -> render detail and mark active
    document.querySelectorAll('.wheel').forEach(w => {
      w.addEventListener('click', () => {
        document.querySelectorAll('.wheel').forEach(x=>x.classList.remove('active'));
        w.classList.add('active');
        renderDetail(w.dataset.key);
      });
    });

    // Copy share URL
    (function(){
      const btn = document.getElementById('copyLink');
      if (!btn) return;
      btn.addEventListener('click', async () => {
        const url = new URL(window.location.origin + '/inspections');
        url.searchParams.set('code', '<%= inspection.code %>');
        try {
          await navigator.clipboard.writeText(url.toString());
          btn.textContent = 'Copied!';
          setTimeout(()=> btn.textContent = 'Copy link', 1500);
        } catch {
          prompt('Copy this link:', url.toString());
        }
      });
    })();
  </script>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
