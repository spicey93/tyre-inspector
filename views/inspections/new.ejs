<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>New Inspection</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/css/bootstrap.min.css" rel="stylesheet"/>
  <style>
    :root{ --muted:#6c757d; --ring:rgba(102,163,255,.25); --ok:#198754; --okbg:#e6f4ea; }
    .muted{ color:var(--muted); }
    .hidden{ display:none !important; }

    /* Smaller car */
    .car-wrap{ position:relative; max-width:200px; margin-inline:auto; }
    @media (min-width:576px){ .car-wrap{ max-width:220px; } }
    @media (min-width:992px){ .car-wrap{ max-width:260px; } }
    .car-svg{ width:100%; height:auto; display:block; }

    .wheel-hotspot{
      position:absolute; width:22%; aspect-ratio:1/1; border-radius:50%;
      transform:translate(-50%,-50%);
      border:2px solid #adb5bd; background:#fff;
      display:flex; align-items:center; justify-content:center; font-weight:700; font-size:.8rem;
      transition: box-shadow .15s, transform .05s, border-color .15s, background-color .15s;
      cursor:pointer; user-select:none;
    }
    .wheel-hotspot.active{ box-shadow:0 0 0 .45rem var(--ring) inset; }
    .wheel-hotspot.completed{ border-color:var(--ok); background:var(--okbg); }

    /* Tread depth quick selects */
    .tread-row .form-select{ text-align:center; }

    /* Tag chips */
    .chip{ border:1px solid #ced4da; border-radius:20px; padding:.25rem .6rem; cursor:pointer; user-select:none; }
    .chip.active{ background:#e7f1ff; border-color:#9ec5fe; }

    .panel-footer-actions{ display:flex; gap:.5rem; justify-content:space-between; flex-wrap:wrap; }
  </style>
</head>
<body class="container py-3">
  <a href="/" class="btn btn-sm btn-outline-secondary mb-2">← Home</a>

  <header class="mb-2">
    <div class="d-flex justify-content-between align-items-center">
      <h1 class="h5 mb-0">New Inspection</h1>
      <span class="badge text-bg-light"><%= vehicle.vrm %></span>
    </div>
    <div class="muted small mt-1">
      <%= vehicle.make %> <%= vehicle.model %> (<%= vehicle.year %>)
      <% if (vehicle.torque) { %> • <%= vehicle.torque %> Nm<% } %>
    </div>
  </header>

  <form method="POST" action="/inspections" id="inspection-form">
    <input type="hidden" name="vrm" value="<%= vehicle.vrm %>" />

    <!-- mileage -->
    <div class="mb-3">
      <label class="form-label">Mileage</label>
      <input type="number" step="1" name="mileage" class="form-control" inputmode="numeric" placeholder="e.g. 45678" />
    </div>

    <!-- PICK SCREEN -->
    <section id="pick-screen">
      <div class="card">
        <div class="card-header fw-bold">Select a wheel to enter details</div>
        <div class="card-body">
          <div class="car-wrap">
            <svg class="car-svg" viewBox="0 0 400 800" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
              <rect x="60" y="60" width="280" height="680" rx="40" fill="#f1f3f5" stroke="#ced4da"/>
              <rect x="80" y="80" width="240" height="120" rx="20" fill="#e9ecef" />
              <rect x="80" y="600" width="240" height="120" rx="20" fill="#e9ecef" />
              <rect x="90" y="240" width="220" height="280" rx="16" fill="#dee2e6" />
              <line x1="60" y1="400" x2="340" y2="400" stroke="#ced4da" stroke-dasharray="4 6"/>
            </svg>

            <button type="button" class="wheel-hotspot" data-key="osf" style="left:86%; top:19%;">OSF</button>
            <button type="button" class="wheel-hotspot" data-key="nsf" style="left:14%; top:19%;">NSF</button>
            <button type="button" class="wheel-hotspot" data-key="osr" style="left:86%; top:81%;">OSR</button>
            <button type="button" class="wheel-hotspot" data-key="nsr" style="left:14%; top:81%;">NSR</button>
          </div>
          <div class="small text-muted mt-2">Sizes are blank unless provided in the URL. Use “Copy to all” to speed up size/pressure/brand/model.</div>
        </div>
      </div>
    </section>

    <% const panels = [
      {key:'osf', title:'Offside Front (OSF)',  sizeDefault: defaults.frontSize, pDefault: defaults.pressures.front},
      {key:'nsf', title:'Nearside Front (NSF)', sizeDefault: defaults.frontSize, pDefault: defaults.pressures.front},
      {key:'osr', title:'Offside Rear (OSR)',   sizeDefault: defaults.rearSize,  pDefault: defaults.pressures.rear},
      {key:'nsr', title:'Nearside Rear (NSR)',  sizeDefault: defaults.rearSize,  pDefault: defaults.pressures.rear},
    ];

    // Tread depth options (8 → 2 in 0.5 steps, plus 1.6)
    const TREADS = [];
    for (let v = 8.0; v >= 2.0; v -= 0.5) TREADS.push(v.toFixed(v % 1 ? 1 : 0));
    TREADS.push("1.6");

    const QUICK_TAGS = [
      "Bald on inner edge",
      "Bald on outer edge",
      "Perished",
      "Bulge",
      "Puncture",
      "Uneven wear",
      "Cracked sidewall",
      "Cord exposed"
    ];
    %>

    <% function panelMarkup(p){ %>
      <section id="panel-<%= p.key %>" class="hidden">
        <div class="card mb-3">
          <div class="card-body">
            <h2 class="h6 mb-3"><%= p.title %></h2>
            <div class="row g-3">

              <!-- Size / Pressure -->
              <div class="col-12">
                <label class="form-label">Size</label>
                <input name="<%= p.key==='osf'?'offside.front.size': p.key==='nsf'?'nearside.front.size': p.key==='osr'?'offside.rear.size':'nearside.rear.size' %>"
                  class="form-control tyre-field" data-tyre-key="<%= p.key %>" value="<%= p.sizeDefault %>" placeholder="e.g. 225/45R17 91W" />
              </div>
              <div class="col-6">
                <label class="form-label">Pressure (psi)</label>
                <input name="<%= p.key==='osf'?'offside.front.pressure': p.key==='nsf'?'nearside.front.pressure': p.key==='osr'?'offside.rear.pressure':'nearside.rear.pressure' %>"
                  type="number" inputmode="decimal" step="0.1" class="form-control tyre-field" data-tyre-key="<%= p.key %>" value="<%= p.pDefault %>"/>
              </div>
              <div class="col-6">
                <label class="form-label">DOT (WWYY in code)</label>
                <input name="<%= p.key==='osf'?'offside.front.dot': p.key==='nsf'?'nearside.front.dot': p.key==='osr'?'offside.rear.dot':'nearside.rear.dot' %>"
                  class="form-control tyre-field" data-tyre-key="<%= p.key %>" placeholder="e.g. 2423"/>
              </div>

              <!-- Brand / Model dropdowns (no manual entry) -->
              <div class="col-6">
                <label class="form-label">Brand</label>
                <select class="form-select tyre-field brand-select" data-tyre-key="<%= p.key %>"
                        name="<%= p.key==='osf'?'offside.front.brand': p.key==='nsf'?'nearside.front.brand': p.key==='osr'?'offside.rear.brand':'nearside.rear.brand' %>">
                  <option value="">Select brand</option>
                  <% for (const b of brandOptions) { %>
                    <option value="<%= b %>"><%= b %></option>
                  <% } %>
                </select>
              </div>

              <div class="col-6">
                <label class="form-label">Model</label>
                <select class="form-select tyre-field model-select"
                        data-tyre-key="<%= p.key %>"
                        name="<%= p.key==='osf'?'offside.front.model': p.key==='nsf'?'nearside.front.model': p.key==='osr'?'offside.rear.model':'nearside.rear.model' %>">
                  <option value="">Select model</option>
                </select>
              </div>

              <!-- Condition -->
              <div class="col-12">
                <label class="form-label">Condition</label>
                <select name="<%= p.key==='osf'?'offside.front.condition': p.key==='nsf'?'nearside.front.condition': p.key==='osr'?'offside.rear.condition':'nearside.rear.condition' %>"
                        class="form-select tyre-field" data-tyre-key="<%= p.key %>">
                  <option value="ok" selected>OK</option>
                  <option value="advisory">Advisory</option>
                  <option value="fail">Fail</option>
                </select>
              </div>

              <!-- Tread depth (quick selects) -->
              <div class="col-12">
                <label class="form-label">Tread depth (mm)</label>
                <div class="row g-2 tread-row">
                  <div class="col-4">
                    <select class="form-select tyre-field" data-tyre-key="<%= p.key %>"
                            name="<%= p.key==='osf'?'offside.front.treadDepth.inner': p.key==='nsf'?'nearside.front.treadDepth.inner': p.key==='osr'?'offside.rear.treadDepth.inner':'nearside.rear.treadDepth.inner' %>">
                      <option value="">Inner</option>
                      <% for (const v of TREADS) { %><option value="<%= v %>"><%= v %></option><% } %>
                    </select>
                  </div>
                  <div class="col-4">
                    <select class="form-select tyre-field" data-tyre-key="<%= p.key %>"
                            name="<%= p.key==='osf'?'offside.front.treadDepth.middle': p.key==='nsf'?'nearside.front.treadDepth.middle': p.key==='osr'?'offside.rear.treadDepth.middle':'nearside.rear.treadDepth.middle' %>">
                      <option value="">Middle</option>
                      <% for (const v of TREADS) { %><option value="<%= v %>"><%= v %></option><% } %>
                    </select>
                  </div>
                  <div class="col-4">
                    <select class="form-select tyre-field" data-tyre-key="<%= p.key %>"
                            name="<%= p.key==='osf'?'offside.front.treadDepth.outer': p.key==='nsf'?'nearside.front.treadDepth.outer': p.key==='osr'?'offside.rear.treadDepth.outer':'nearside.rear.treadDepth.outer' %>">
                      <option value="">Outer</option>
                      <% for (const v of TREADS) { %><option value="<%= v %>"><%= v %></option><% } %>
                    </select>
                  </div>
                </div>
              </div>

              <!-- Quick tags -->
              <div class="col-12">
                <label class="form-label">Tags</label><br/>
                <div class="d-flex flex-wrap gap-2">
                  <% for (const tag of QUICK_TAGS) { 
                       const id = `${p.key}-tag-${tag.replace(/[^a-z0-9]+/gi,'-').toLowerCase()}`; %>
                    <label class="chip" for="<%= id %>">
                      <input id="<%= id %>" type="checkbox" class="form-check-input me-1 d-none tag-input"
                             name="<%= p.key==='osf'?'offside.front.tags': p.key==='nsf'?'nearside.front.tags': p.key==='osr'?'offside.rear.tags':'nearside.rear.tags' %>"
                             value="<%= tag %>"/>
                      <span><%= tag %></span>
                    </label>
                  <% } %>
                </div>
              </div>

              <!-- Notes -->
              <div class="col-12">
                <label class="form-label">Notes</label>
                <textarea name="<%= p.key==='osf'?'offside.front.notes': p.key==='nsf'?'nearside.front.notes': p.key==='osr'?'offside.rear.notes':'nearside.rear.notes' %>"
                  rows="2" class="form-control tyre-field" data-tyre-key="<%= p.key %>" placeholder="Damage, age cracks, nails, uneven wear…"></textarea>
              </div>
            </div>

            <!-- Panel footer actions -->
            <div class="panel-footer-actions mt-3">
              <button type="button" class="btn btn-outline-secondary" data-back>Back to car</button>
              <button type="button" class="btn btn-primary" data-save-back="<%= p.key %>">Save <%= p.key.toUpperCase() %></button>
              <button type="button" class="btn btn-sm btn-outline-primary ms-auto" data-copy-all="<%= p.key %>">Copy to all (core fields)</button>
            </div>
          </div>
        </div>
      </section>
    <% } %>

    <% for (const p of panels) { %>
      <%- panelMarkup(p) %>
    <% } %>

    <!-- Appears only when all four tyres complete -->
    <div class="mb-3 hidden" id="notes-block">
      <label class="form-label">General notes</label>
      <textarea name="notes" class="form-control" rows="3" placeholder="Overall findings, advisories, etc."></textarea>
    </div>

    <div class="mb-5 hidden" id="save-block">
      <button class="btn btn-success w-100">Save inspection</button>
    </div>
  </form>

  <script>
    const PATHS = { osf:'offside.front', nsf:'nearside.front', osr:'offside.rear', nsr:'nearside.rear' };

    // brand -> models
    async function fetchModels(brand) {
      if (!brand) return [];
      try {
        const res = await fetch(`/inspections/api/tyres/models?brand=${encodeURIComponent(brand)}`);
        return await res.json();
      } catch { return []; }
    }

    // Populate models when a brand changes
    document.addEventListener('change', async (e) => {
      if (!e.target.classList.contains('brand-select')) return;
      const sel = e.target;
      const key = sel.getAttribute('data-tyre-key');
      const modelSel = document.querySelector(`#panel-${key} .model-select`);
      modelSel.innerHTML = `<option value="">Select model</option>`;
      if (sel.value) {
        const models = await fetchModels(sel.value);
        for (const m of models) {
          const opt = document.createElement('option'); opt.value = m; opt.textContent = m;
          modelSel.appendChild(opt);
        }
      }
    });

    // Tag chips toggle
    document.querySelectorAll('.chip').forEach(ch => {
      ch.addEventListener('click', (e) => {
        const input = ch.querySelector('.tag-input');
        if (!input) return;
        input.checked = !input.checked;
        ch.classList.toggle('active', input.checked);
        e.preventDefault();
      });
    });

    const pickScreen = document.getElementById('pick-screen');
    const notesBlock = document.getElementById('notes-block');
    const saveBlock = document.getElementById('save-block');

    // go to panel
    document.querySelectorAll('.wheel-hotspot').forEach(btn => {
      btn.addEventListener('click', () => {
        const key = btn.dataset.key;
        pickScreen.classList.add('hidden');
        document.getElementById('panel-'+key).classList.remove('hidden');
        document.querySelectorAll('.wheel-hotspot').forEach(h=>h.classList.remove('active'));
        btn.classList.add('active');
        window.scrollTo({ top: 0, behavior: 'smooth' });
      });
    });

    // back to car
    document.querySelectorAll('[data-back]').forEach(a => {
      a.addEventListener('click', (e) => {
        e.preventDefault();
        document.querySelectorAll('section[id^="panel-"]').forEach(s => s.classList.add('hidden'));
        pickScreen.classList.remove('hidden');
        document.querySelectorAll('.wheel-hotspot').forEach(h=>h.classList.remove('active'));
        window.scrollTo({ top: 0, behavior: 'smooth' });
      });
    });

    // completion rules (brand & model must be selected, not blank)
    function isNum(v){ return v !== "" && !isNaN(Number(v)); }
    function filled(v){ return v != null && String(v).trim() !== ""; }
    function tyreComplete(path){
      const g = (n)=>document.querySelector(`[name="${path}.${n}"]`)?.value ?? "";
      return filled(g('size')) && isNum(g('pressure'))
          && filled(g('brand')) && filled(g('model'))
          && isNum(g('treadDepth.inner')) && isNum(g('treadDepth.middle')) && isNum(g('treadDepth.outer'));
    }

    function markWheel(key){
      const hotspot = document.querySelector(`.wheel-hotspot[data-key="${key}"]`);
      if (!hotspot) return;
      if (tyreComplete(PATHS[key])) hotspot.classList.add('completed');
      else hotspot.classList.remove('completed');
    }

    function updateSaveVisibility(){
      const allDone = Object.values(PATHS).every(tyreComplete);
      notesBlock.classList.toggle('hidden', !allDone);
      saveBlock.classList.toggle('hidden', !allDone);
    }

    // track inputs
    document.querySelectorAll('.tyre-field').forEach(el => {
      el.addEventListener('input', e => {
        const key = e.target.getAttribute('data-tyre-key');
        if (key) { markWheel(key); updateSaveVisibility(); }
      });
      el.addEventListener('change', e => {
        const key = e.target.getAttribute('data-tyre-key');
        if (key) { markWheel(key); updateSaveVisibility(); }
      });
    });

    // Save & back to car (just mark complete + go back)
    document.querySelectorAll('[data-save-back]').forEach(btn => {
      btn.addEventListener('click', () => {
        const key = btn.getAttribute('data-save-back');
        markWheel(key);
        updateSaveVisibility();
        document.querySelectorAll('section[id^="panel-"]').forEach(s => s.classList.add('hidden'));
        pickScreen.classList.remove('hidden');
        document.querySelectorAll('.wheel-hotspot').forEach(h=>h.classList.remove('active'));
        window.scrollTo({ top: 0, behavior: 'smooth' });
      });
    });

    // Copy to all — only size/pressure/brand/model
    function readCore(path){
      const get = (n)=>document.querySelector(`[name="${path}.${n}"]`)?.value ?? "";
      return { size:get('size'), pressure:get('pressure'), brand:get('brand'), model:get('model') };
    }
    function writeCore(path, d){
      const set = (n,v)=>{ const el=document.querySelector(`[name="${path}.${n}"]`); if (el) el.value=v; }
      set('size', d.size);
      set('pressure', d.pressure);

      // brand (select option must exist to set)
      const bSel = document.querySelector(`[name="${path}.brand"]`);
      if (bSel) { bSel.value = ""; [...bSel.options].forEach(o=>{ if (o.value===d.brand) bSel.value=d.brand; }); }

      // model (will be populated only after brand change; attempt immediate set if exists)
      const mSel = document.querySelector(`[name="${path}.model"]`);
      if (mSel) {
        mSel.value = "";
        [...mSel.options].forEach(o=>{ if (o.value===d.model) mSel.value=d.model; });
      }
    }
    document.querySelectorAll('[data-copy-all]').forEach(btn => {
      btn.addEventListener('click', async () => {
        const fromKey = btn.getAttribute('data-copy-all');
        const core = readCore(PATHS[fromKey]);

        // For each tyre: set brand first, then fetch and populate models, then set model
        for (const [k,p] of Object.entries(PATHS)) {
          if (k === fromKey) continue;

          // brand
          const bSel = document.querySelector(`[name="${p}.brand"]`);
          const mSel = document.querySelector(`[name="${p}.model"]`);
          if (bSel && mSel) {
            // set size/pressure immediately
            writeCore(p, core);
            // populate models for this brand
            mSel.innerHTML = `<option value="">Select model</option>`;
            if (core.brand) {
              const models = await fetchModels(core.brand);
              for (const m of models) {
                const opt = document.createElement('option'); opt.value = m; opt.textContent = m;
                mSel.appendChild(opt);
              }
              // now set model if it exists
              mSel.value = "";
              [...mSel.options].forEach(o=>{ if (o.value===core.model) mSel.value = core.model; });
            }
          }
        }

        // refresh completion status
        Object.keys(PATHS).forEach(markWheel);
        updateSaveVisibility();
      });
    });

    // init visibility
    Object.keys(PATHS).forEach(markWheel);
    updateSaveVisibility();
  </script>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
